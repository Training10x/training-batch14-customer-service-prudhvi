name: Customer Service CI/CD

on:
  push:
    branches: [ "main", "sprint4/feature", "dev", "hotfix", "release" ]
  pull_request:
    branches: [ "main", "sprint4/feature", "dev", "hotfix", "release" ]

jobs:
  setup:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: springdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-timeout=30s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Build with Maven
        run: mvn clean install
        working-directory: ../  # Go one directory back to find pom.xml

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Tests
        run: mvn test
        working-directory: ../  # Go one directory back to find pom.xml

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Generate Code Coverage Report
        run: mvn jacoco:report
        working-directory: ../  # Go one directory back to find pom.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  code_quality:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Analyze Code Quality
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=prudhvi-nelaturi_customer-service
        working-directory: ../  # Go one directory back to find pom.xml

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: prudhvi2902/customer-service-image
          tags: v1
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        working-directory: ../  # Go one directory back to find pom.xml
